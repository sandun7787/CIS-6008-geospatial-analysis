detach(fertilizer_data)
### import the fertilizer_data_New dataset
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
fertilizer_data_New
### attach the fertilizer_data_New dataset
attach(fertilizer_data_New)
### View the data of new dataset
View(fertilizer_data_New)
### Normality testing
## import the nortest package
install.packages("nortest")
## call the library
library("nortest")
### Anderson darling testing for Crop_Yield
ad.test(Crop_Yield)
### Lillifor testing for Crop_Yield
lillie.test(Crop_Yield)
### Shapiro-wiki testing for Crop_Yield
shapiro.test(Crop_Yield)
### summary statistics
summary(Crop_Yield)
hist(Crop_Yield, main="Crop_Yield Distribution",
xlab="Crop_Yield Category",
ylab="Crop_Yield",
prob=TRUE)
curve(dnorm(x, mean=mean(Crop_Yield, na.rm=TRUE),
sd=sd(Crop_Yield, na.rm =TRUE)), add=TRUE)
### quintile plot for Crop_Yield
library('Rcmdr')
### Anderson Darling for Phosphorus_Level
ad.test(Phosphorus_Level)
### Lillifor test Phosphorus_Level
lillie.test(Phosphorus_Level)
### shapiro-wiki test for Phosphorus_Level
shapiro.test(Phosphorus_Level)
### summary  statistics of Phosphorus_Level
summary(Phosphorus_Level)
hist(Phosphorus_Level, main="Phosphorus_Level Distribution",
xlab="Phosphorus_Level Category",
ylab="Phosphorus_Level",
prob=TRUE)
curve(dnorm(x, mean=mean(Fertilizer_Amount, na.rm=TRUE),
sd=sd(Crop_Type, na.rm =TRUE)), add=TRUE)
curve(dnorm(x, mean=mean(Phosphorus_Level, na.rm=TRUE),
sd=sd(Phosphorus_Level, na.rm =TRUE)), add=TRUE)
### summary statistics
summary(Crop_Yield)
with(fertilizer_data_New, qqPlot(Crop_Yield, dist="norm",
id=list(method="y", n=2, labels=rownames(fertilizer_data_New)),
xlab="Crop_Yield Category", ylab="Crop_Yield",
main="Crop_Yield Distribution"))
with(fertilizer_data_New, qqPlot(Crop_Type, dist="norm",
id=list(method="y",
n=2, labels=rownames(fertilizer_data_New)),
xlab="Crop_Type Category",
ylab="Crop_Type", main="Crop_Type Distribution"))
with(fertilizer_data_New, qqPlot(Fertilizer_Amount, dist="norm",
id=list(method="y", n=2, labels=rownames(fertilizer_data_New)),
xlab="Fertilize_Amount Category", ylab="Fertilize_Amount",
main="Fertilize_Amount Distribution"))
with(fertilizer_data_New, qqPlot(Potassium_Level, dist="norm",
id=list(method="y", n=2, labels=rownames(fertilizer_data_New)),
xlab="Potassium-Level Category", ylab="Potassium-Level",
main="Potassium Level Distribution"))
with(fertilizer_data_New, qqPlot(Phosphorus_Level, dist="norm",
id=list(method="y", n=2, labels=rownames(fertilizer_data_New)),
xlab="Phosphrous_Level Category", ylab="Phosphorus_Level",
main="Phosphorus_Level Distribution"))
### Anderson darling test Nirogen_Level
ad.test(Nitrogen_Level)
### Lillifor test for Nitrogen_Level
lillie.test(Nitrogen_Level)
### shaipro-wiki test for Nitrogen_Level
shapiro.test(Nitrogen_Level)
### summary  statistics of Nitrogen_Level
summary(Nitrogen_Level)
### import the dataset
fertilizer_data <- read.csv("Fertilizer_Soil_Data.csv")
fertilizer_data
### view the dataset
View(fertilizer_data)
### check the data type
str(fertilizer_data)
### binding the dataset with  environment
attach(fertilizer_data)
### view the dataser
View(fertilizer_data)
###check the null values
fertilizer_data[!complete.cases(fertilizer_data),]
### Preparing the data sets( we calles as data preprocessing)
install.packages('plyr')
library('plyr')
fertilizer_data$Crop_Type <- revalue(Crop_Type,c( Wheat=7,Rice=6,Corn=5,Soybean=4, Barley=3,Oats=2,Potato=1))
write.csv(fertilizer_data,"fertilizer_data_New.csv")
### detach the fertilizer_data dataset
detach(fertilizer_data)
### import the fertilizer_data_New dataset
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
fertilizer_data_New
### attach the fertilizer_data_New dataset
attach(fertilizer_data_New)
### View the data of new dataset
View(fertilizer_data_New)
### Normality testing
## import the nortest package
install.packages("nortest")
## call the library
library("nortest")
hist(Nitrogen_Level, main="Nitrogen_Level Distribution",
xlab="Nitrogen_Level Category",
ylab="Nitrogen_Level",
prob=TRUE)
curve(dnorm(x, mean=mean(Nitrogen_Level, na.rm=TRUE),
sd=sd(Nitrogen_Level, na.rm =TRUE)), add=TRUE)
### quantile plot for Nitrogen_Level
library('Rcmdr')
### summary  statistics of Nitrogen_Level
summary(Nitrogen_Level)
#### Anderson Darling test for Soil Moisture
ad.test(Soil_Moisture)
#### Lillifor test for Soil Moisture
lillie.test(Soil_Moisture)
#### Shapiro-wiki for Soil Moisture
shapiro.test(Soil_Moisture)
### summary statistics
summary(Soil_Moisture)
hist(Soil_Moisture, main="Soil_Moisture Distribution",
xlab="Soil_Moisture Category",
ylab="Soil_Moisture",
prob=TRUE)
curve(dnorm(x, mean=mean(Soil_Moisture, na.rm=TRUE),
sd=sd(Soil_Moisture, na.rm =TRUE)), add=TRUE)
#### Anderson Darling test for Soil_pH
ad.test(Soil_pH)
#### Lillifor test for Soil Moisture
lillie.test(Soil_pH)
#### Shapiro-wiki for Soil Moisture
shapiro.test(Soil_pH)
### summary statistics
summary(Soil_pH)
### summary statistics
summary(Soil_Moisture)
### summary statistics
summary(Soil_pH)
hist(Soil_pH, main="Soil_pH Distribution",
xlab="Soil_pH Category",
ylab="Soil_pH",
prob=TRUE)
curve(dnorm(x, mean=mean(Soil_pH, na.rm=TRUE),
sd=sd(Soil_pH, na.rm =TRUE)), add=TRUE)
### quantile plot for Soil_Moisture
with(fertilizer_data_New, qqPlot(Soil_pH, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Soil_pH Category",
ylab="Soil_pH", main="Soil_pHDistributionn"))
### quantile plot for Soil_Moisture
with(fertilizer_data_New, qqPlot(Soil_pH, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Soil_pH Category",
ylab="Soil_pH", main="Soil_pH Distributionn"))
#### Anderson Darling test for Rainfall
ad.test(Rainfall)
#### Lillifor test for Soil Moisture
lillie.test(Rainfall)
#### Shapiro-wiki for Soil Moisture
shapiro.test(Rainfall)
### summary statistics
summary(Rainfall)
curve(dnorm(x, mean=mean(Rainfall, na.rm=TRUE),
sd=sd(Rainfall, na.rm =TRUE)), add=TRUE)
hist(Rainfall, main="Rainfall Distribution",
xlab="Rainfall Category",
ylab="Rainfall",
prob=TRUE)
curve(dnorm(x, mean=mean(Rainfall, na.rm=TRUE),
sd=sd(Rainfall, na.rm =TRUE)), add=TRUE)
with(fertilizer_data_New, qqPlot(Rainfall, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Rainfall Category",
ylab="Soil_pH", main="Rainfall Distributionn"))
with(fertilizer_data_New, qqPlot(Rainfall, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Rainfall Category",
ylab="Rainfall", main="Rainfall Distributionn"))
hist(Humidity, main="Humdity Distribution",
xlab="Humidity Category",
ylab="Humidity",
prob=TRUE)
curve(dnorm(x, mean=mean(Humidity, na.rm=TRUE),
sd=sd(Humidity, na.rm =TRUE)), add=TRUE)
#### Anderson Darling test for Humidity
ad.test(Humidity)
#### Shapiro-wiki for Soil Moisture
shapiro.test(Humidity)
#### Shapiro-wiki for Soil Moisture
shapiro.test(Humidity)
#### Lillifor test for Soil Moisture
lillie.test(Humidity)
### summary statistics
summary(Humidity)
with(fertilizer_data_New, qqPlot(Humidity, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Humidity Category",
ylab="Humidity", main="Humidity Distributionn"))
ad.test(Temperature)
lillie.test(Temperature)
#### Shapiro-wiki for Soil Moisture
shapiro.test(Temperature)
ad.test(Humidity)
hist(Temperature, main="Temperature Distribution",
xlab="Temperature Category",
ylab="Temperature",
prob=TRUE)
curve(dnorm(x, mean=mean(Temperature, na.rm=TRUE),
sd=sd(Temperature, na.rm =TRUE)), add=TRUE)
summary(Temperature)
with(fertilizer_data_New, qqPlot(Temperature, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Temperature Category",
ylab="Temperature", main="Temperature Distributionn"))
### quantile plot for Rainfall
with(fertilizer_data_New, qqPlot(Temperature, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Temperature Category",
ylab="Temperature", main="Temperature Distributionn"))
### correlational analysis
### Spearman method ###
cor.test(Crop_Yield,Crop_Type, method="spearman",alternative="two.sided")
### correlational analysis
### Spearman method ###
cor.test(Crop_Yield~Crop_Type, method="spearman",alternative="two.sided")
### correlational analysis
### Spearman method ###
cor.test(Crop_Yield,Crop_Type, method="spearman",alternative="two.sided")
cor.test(Crop_Yield,Fertilizer_Amount, method="spearman",alternative="two.sided")
### graphical analysis for Crop_Yield and Crop_Type
scatterplot(Crop_Yield,Crop_Type, regLine=TRUE, smooth=FALSE, boxplots=FALSE,
xlab="Crop_Type", ylab="Crop_Yield", main="Crop_Yield vs Crop_Type",
data=fertilizer_data_New)
### graphical analysis for Crop_Yield and Crop_Type
scatterplot(Crop_Yield~Crop_Type, regLine=TRUE, smooth=FALSE, boxplots=FALSE,
xlab="Crop_Type", ylab="Crop_Yield", main="Crop_Yield vs Crop_Type",
data=fertilizer_data_New)
cor.test(Crop_Yield,Crop_Type, method="spearman",alternative="two.sided")
cor.test(Crop_Yield,Fertilizer_Amount, method="spearman",alternative="two.sided")
scatterplot(Crop_Yield~Crop_Type, regLine=TRUE, smooth=FALSE, boxplots=FALSE,
xlab="Crop_Type", ylab="Crop_Yield", main="Crop_Yield vs Crop_Type",
data=fertilizer_data_New)
### correlational analysis
### Spearman method  for Crop_Yield and Crop_Type###
cor.test(Crop_Yield,Crop_Type, method="spearman",alternative="two.sided")
### Spearman method  for Crop_Yield and Potassium_Level###
cor.test(Crop_Yield,Potassium_Level, method="spearman",alternative="two.sided")
scatterplot(Crop_Yield~Fertilizer_Amount, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Fertilize_Amount", ylab="Crop_Yield",
main="Crop_Yield vs Fertilize_Amount", data=fertilizer_data_New)
data=fertilizer_data_New)
### graphical analysis for Crop_Yield and Fertilizer_Amount
scatterplot(Crop_Yield~Fertilizer_Amount, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Fertilize_Amount", ylab="Crop_Yield",
main="Crop_Yield vs Fertilize_Amount", data=fertilizer_data_New)
###graphical analysis for Crop_Yield and Potassium_Level
scatterplot(Crop_Yield~Potassium_Level, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Potassium_Level", ylab="Crop_Yield",
main="Crop_Yield vs Potassium_Level", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Phosphorus_Level
cor.test(Crop_Yield,Phosphorus_Level, method="Spearman", alternative = "two.sided")
### Spearman method for Crop_Yield and Phosphorus_Level
cor.test(Crop_Yield,Phosphorus_Level, method="spearman", alternative = "two.sided")
### Spearman method for Crop_Yield and Phosphorus_Level
cor.test(Crop_Yield,Phosphorus_Level, method="spearman", alternative = "two.sided")
### Spearman method for Crop_Yield and Phosphorus_Level
cor.test(Crop_Yield,Phosphorus_Level, method="spearman", alternative = "two.sided")
###graphical analysis  between Crop_Yield and Potassium_Level
scatterplot(Crop_Yield~Potassium_Level, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Potassium_Level", ylab="Crop_Yield",
main="Crop_Yield vs Potassium_Level", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Phosphorus_Level
cor.test(Crop_Yield,Phosphorus_Level, method="spearman", alternative = "two.sided")
### Spearman method for Crop_Yield and Phosphorus_Level
cor.test(Crop_Yield,Phosphorus_Level, method="spearman", alternative = "two.sided")
### graphical analysis  between Crop_Yield and Phosphorus_Level
scatterplot(Crop_Yield~Phosphorus_Level, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Phosphorus_Level", ylab="Crop_Yield",
main="Crop_Yield vs Phosphorus_Level", data=fertilizer_data_New)
### correlational analysis
### Spearman method  for Crop_Yield and Crop_Type###
cor.test(Crop_Yield,Crop_Type, method="spearman",alternative="two.sided")
### Spearman method  for Crop_Yield and Fertilizer_Amount###
cor.test(Crop_Yield,Fertilizer_Amount, method="spearman",alternative="two.sided")
### Spearman method  for Crop_Yield and Potassium_Level###
cor.test(Crop_Yield,Potassium_Level, method="spearman",alternative="two.sided")
###graphical analysis  between Crop_Yield and Potassium_Level
scatterplot(Crop_Yield~Potassium_Level, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Potassium_Level", ylab="Crop_Yield",
main="Crop_Yield vs Potassium_Level", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Nitrogen_Level
cor.test(Crop_Yield,Nitrogen_Level, method="spearman", alternative = "two.sided")
### graphical analysis  between Crop_Yield and Nitrogen_Level
scatterplot(Crop_Yield~Nitrogen_Level, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Nitrogen_Level", ylab="Crop_Yield",
main="Crop_Yield vs Nitrogen_Level", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Nitrogen_Level
cor.test(Crop_Yield,Nitrogen_Level, method="spearman", alternative = "two.sided")
### Spearman method for Crop_Yield and Soil_Moisture
cor.test(Crop_Yield,Soil_Moisture, method="spearman", alternative = "two.sided")
### graphical analysis  between Crop_Yield and Nitrogen_Level
scatterplot(Crop_Yield~Soil_Moisture, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Soil_Moisture", ylab="Crop_Yield",
main="Crop_Yield vs Soil_Moisture", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Soil_pH
cor.test(Crop_Yield,Soil_pH, method="spearman", alternative = "two.sided")
### graphical analysis  between Crop_Yield and Soil_pH
scatterplot(Crop_Yield~Soil_pH, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Soil_pH", ylab="Crop_Yield",
main="Crop_Yield vs Soil_pH", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Rainfall
cor.test(Crop_Yield,Rainfall, method="spearman", alternative = "two.sided")
### graphical analysis  between Crop_Yield and Rainfall
scatterplot(Crop_Yield~Rainfall, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Rainfall", ylab="Crop_Yield",
main="Crop_Yield vs Rainfall", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Humidity
cor.test(Crop_Yield,Humidity, method="spearman", alternative = "two.sided")
scatterplot(Crop_Yield~Humidity, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Rainfall", ylab="Crop_Yield",
main="Crop_Yield vs Humdity", data=fertilizer_data_New)
### graphical analysis  between Crop_Yield and Rainfall
scatterplot(Crop_Yield~Humidity, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Rainfall", ylab="Crop_Yield",
main="Crop_Yield vs Humidity", data=fertilizer_data_New)
### Spearman method for Crop_Yield and Humidity
cor.test(Crop_Yield,Temperature, method="spearman", alternative = "two.sided")
### graphical analysis  between Crop_Yield and Rainfall
scatterplot(Crop_Yield~Temperature, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Temperature", ylab="Crop_Yield",
main="Crop_Yield vs Temperature", data=fertilizer_data_New)
library('Rcmdr')
with(fertilizer_data_New, qqPlot(Crop_Yield, dist="norm",
id=list(method="y", n=2, labels=rownames(fertilizer_data_New)),
xlab="Crop_Yield Category", ylab="Crop_Yield",
main="Crop_Yield Distribution"))
scatterplot(Crop_Yield~Temperature, regLine=TRUE, smooth=FALSE,
boxplots=FALSE, xlab="Temperature", ylab="Crop_Yield",
main="Crop_Yield vs Temperature", data=fertilizer_data_New)
with(fertilizer_data_New, qqPlot(Temperature, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Temperature Category",
ylab="Temperature", main="Temperature Distributionn"))
with(fertilizer_data_New, qqPlot(Humidity, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Humidity Category",
ylab="Humidity", main="Humidity Distributionn"))
### Spearman method for Crop_Yield and Humidity
cor.test(Crop_Yield,Temperature, method="spearman", alternative = "two.sided")
### Spearman method for Crop_Yield and Humidity
cor.test(Crop_Yield,Temperature, method="spearman", alternative = "two.sided")
with(fertilizer_data_New, qqPlot(Temperature, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Temperature Category",
ylab="Temperature", main="Temperature Distributionn"))
with(fertilizer_data_New, qqPlot(Temperature, dist="norm", id=list(method="y", n=2,
labels=rownames(fertilizer_data_New)), xlab="Temperature Category",
ylab="Temperature", main="Temperature Distribution"))
### summary statistics
summary(Fertilizer_Amount)
### Spearman method for Crop_Yield and Humidity
cor.test(Crop_Yield,Humidity, method="spearman", alternative = "two.sided")
### import the dataset
fertilizer_data <- read.csv("Fertilizer_Soil_Data.csv")
fertilizer_data
### view the dataset
View(fertilizer_data)
### import the dataset
fertilizer_data <- read.csv("Fertilizer_Soil_Data.csv")
fertilizer_data
### binding the dataset with  environment
attach(fertilizer_data)
### view the dataser
View(fertilizer_data)
###check the null values
fertilizer_data[!complete.cases(fertilizer_data),]
### detach the fertilizer_data dataset
detach(fertilizer_data)
### import the fertilizer_data_New dataset
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
detach(fertilizer_data)
attach(fertilizer_data)
View(fertilizer_data)
fertilizer_data[!complete.cases(fertilizer_data),]
### Preparing the data sets( we calles as data preprocessing)
install.packages('plyr')
library('plyr')
fertilizer_data$Crop_Type <- revalue(Crop_Type,c( Wheat=7,Rice=6,Corn=5,Soybean=4, Barley=3,Oats=2,Potato=1))
write.csv(fertilizer_data,"fertilizer_data_New.csv")
detach(fertilizer_data)
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
fertilizer_data_New
attach(fertilizer_data_New)
scatterplotMatrix(~Crop_Type+Crop_Yield+Fertilizer_Amount+Humidity+Nitrogen_Level+Phosphorus_Level+Potassium_Level+Rainfall+Soil_Moisture+Soil_pH+Temperature,
regLine=TRUE, smooth=FALSE, diagonal=list(method="density"),
data=fertilizer_data_New)
### graphical analysis for multilinear model
library('Rcmdr')
scatterplotMatrix(~Crop_Type+Crop_Yield+Fertilizer_Amount+Humidity+Nitrogen_Level+Phosphorus_Level+Potassium_Level+Rainfall+Soil_Moisture+Soil_pH+Temperature,
regLine=TRUE, smooth=FALSE, diagonal=list(method="density"),
data=fertilizer_data_New)
cropyield_multi_linear_model <- lm(Crop_Yield~Crop_Type+Fertilizer_Amount+
Potassium_Level+Phosphorus_Level+
Nitrogen_Level+Soil_Moisture+
Soil_pH+Rainfall+
Humidity+Temperature, model=TRUE)
summary(cropyield_multi_linear_model)
cropyield_multi_linear_model <- lm(~Crop_Yield+Crop_Type+Fertilizer_Amount+
Potassium_Level+Phosphorus_Level+
Nitrogen_Level+Soil_Moisture+
Soil_pH+Rainfall+
Humidity+Temperature, model=TRUE)
cropyield_multi_linear_model <- lm(~Crop_Yield+Crop_Type+Fertilizer_Amount+
Potassium_Level+Phosphorus_Level+
Nitrogen_Level+Soil_Moisture+
Soil_pH+Rainfall+
Humidity+Temperature, model=TRUE)
cropyield_multi_linear_model <- lm(Crop_Yield~Crop_Type+Fertilizer_Amount+
Potassium_Level+Phosphorus_Level+
Nitrogen_Level+Soil_Moisture+
Soil_pH+Rainfall+
Humidity+Temperature, model=TRUE)
cropyield_multi_linear_model <- lm(Crop_Yield~Crop_Type+Fertilizer_Amount+
Potassium_Level+Phosphorus_Level+
Nitrogen_Level+Soil_Moisture+
Soil_pH+Rainfall+
Humidity+Temperature, model=TRUE)
cropyield_multi_linear_model
### summary statistics of cropyield_multi_lineaar_model
summary(cropyield_multi_linear_model)
ad.test(Humidity)
### import the dataset
fertilizer_data <- read.csv("Fertilizer_Soil_Data.csv")
fertilizer_data
### view the dataset
View(fertilizer_data)
### check the data type
str(fertilizer_data)
### binding the dataset with  environment
attach(fertilizer_data)
###check the null values
fertilizer_data[!complete.cases(fertilizer_data),]
### Preparing the data sets( we calles as data preprocessing)
install.packages('plyr')
library('plyr')
fertilizer_data$Crop_Type <- revalue(Crop_Type,c( Wheat=7,Rice=6,Corn=5,Soybean=4, Barley=3,Oats=2,Potato=1))
write.csv(fertilizer_data,"fertilizer_data_New.csv")
### detach the fertilizer_data dataset
detach(fertilizer_data)
### import the fertilizer_data_New dataset
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
fertilizer_data_New
### attach the fertilizer_data_New dataset
attach(fertilizer_data_New)
### View the data of new dataset
View(fertilizer_data_New)
## call the library
library("nortest")
### Anderson darling testing for Crop_Yield
ad.test(Crop_Yield)
summary(Crop_Yield)
#### Anderson Darling test for Humidity
ad.test(Humidity)
### summary statistics of Humidity
summary(Humidity)
### import the dataset
fertilizer_data <- read.csv("Fertilizer_Soil_Data.csv")
fertilizer_data
### view the dataset
View(fertilizer_data)
### check the data type
str(fertilizer_data)
### binding the dataset with  environment
attach(fertilizer_data)
### view the dataser
View(fertilizer_data)
###check the null values
fertilizer_data[!complete.cases(fertilizer_data),]
### Preparing the data sets( we calles as data preprocessing)
install.packages('plyr')
library('plyr')
fertilizer_data$Crop_Type <- revalue(Crop_Type,c( Wheat=7,Rice=6,Corn=5,Soybean=4, Barley=3,Oats=2,Potato=1))
write.csv(fertilizer_data,"fertilizer_data_New.csv")
### detach the fertilizer_data dataset
detach(fertilizer_data)
### import the fertilizer_data_New dataset
fertilizer_data_New <- read.csv("fertilizer_data_New.csv")
fertilizer_data_New
### attach the fertilizer_data_New dataset
attach(fertilizer_data_New)
### View the data of new dataset
View(fertilizer_data_New)
### Normality testing
## import the nortest package
install.packages("nortest")
### Anderson darling testing for Crop_Yield
ad.test(Crop_Yield)
### attach the fertilizer_data_New dataset
attach(fertilizer_data_New)
attach(fertilizer_data_New)
### Anderson darling testing for Crop_Yield
ad.test(Crop_Yield)
library("nortest")
ad.test(Crop_Yield)
### correlational analysis
### Spearman method  for Crop_Yield and Crop_Type###
cor.test(Crop_Yield,Crop_Type, method="spearman",alternative="two.sided")
cropyield_multi_linear_model <- lm(Crop_Yield~Crop_Type+Fertilizer_Amount+
Potassium_Level+Phosphorus_Level+
Nitrogen_Level+Soil_Moisture+
Soil_pH+Rainfall+
Humidity+Temperature, model=TRUE)
cropyield_multi_linear_model
### summary statistics of cropyield_multi_lineaar_model
summary(cropyield_multi_linear_model)
